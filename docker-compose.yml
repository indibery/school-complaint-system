version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: school_complaint_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: complaint_system
      POSTGRES_USER: complaint_admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password_here}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql:ro
      - ./database/test_data.sql:/docker-entrypoint-initdb.d/2-test_data.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - school_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U complaint_admin -d complaint_system"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: school_complaint_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - school_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application
  app:
    build:
      context: .
      target: production
    container_name: school_complaint_app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: complaint_system
      DB_USER: complaint_admin
      DB_PASSWORD: ${DB_PASSWORD:-your_secure_password_here}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # JWT Secrets
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_minimum_32_characters_long}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your_refresh_token_secret_key_minimum_32_characters}
      
      # Email Configuration
      EMAIL_SERVICE: ${EMAIL_SERVICE:-gmail}
      EMAIL_USER: ${EMAIL_USER:-your-email@gmail.com}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-your-app-password}
      
      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000,http://localhost:3001}
      
      # Rate Limiting
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900000}
      
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - school_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: school_complaint_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - school_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  school_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local